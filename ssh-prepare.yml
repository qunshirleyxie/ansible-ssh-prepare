---
- name: Updates local 'known_hosts' file and pushes user public key to each host
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # default public key pushed to targets - override if necessary
    ssh_public_key: '~/.ssh/id_rsa.pub'

    # defaults - most likely not necessary to change these values
    ssh_known_hosts_key_type_param: "-t ecdsa-sha2-nistp256" # leave empty if you want all key types
    ssh_known_hosts_command: "ssh-keyscan -T 10 {{ ssh_known_hosts_key_type_param }}"
    ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"
    ssh_known_hosts: "{{ groups['all'] }}" # all inventory hosts

    # optional - add security after configuring key authentication
    # ssh_disable_password_auth: false # optionally disable password authentication for tighter security
    # ssh_disable_root_login: false # optionally disable root login for tighter security

    # optional - generate a key (if you have not generated one yet)
    ssh_keygen_enable: false
    ssh_private_key: '~/.ssh/id_rsa'

  vars_prompt:
    - name: "ansible_ssh_pass"
      prompt: "SSH Password for user {{ ansible_ssh_user }}?"
      private: yes
      when: (( ansible_ssh_pass is undefined ) or ( ansible_ssh_pass is none ) or ( ansible_ssh_pass | trim == ''))

  tasks:

  - name: known_hosts - Collect all public host keys for each host
    shell: "{{ ssh_known_hosts_command }} {{ item }},`dig +short {{ item }}`"
    with_items: "{{ ssh_known_hosts }}"
    register: ssh_known_host_results
    ignore_errors: yes

  - name: known_hosts - Cleanup known_hosts by removing entries related to each host
    known_hosts:
      name: "{{ item.item }}"
      state: "absent"
      path: "{{ ssh_known_hosts_file }}"
    with_items: "{{ ssh_known_host_results.results }}"

  - name: known_hosts - Add the public host keys to the known_hosts
    known_hosts:
      name: "{{ item.item }}"
      key: "{{ item.stdout }}"
      state: "present"
      path: "{{ ssh_known_hosts_file }}"
    with_items: "{{ ssh_known_host_results.results }}"

  - name: user key - Optionally generate user SSH key pair
    shell: "ssh-keygen -b 2048 -t rsa -f {{ ssh_private_key }} -q -N ''"
    args:
      creates: "{{ ssh_private_key }}"
    when: ssh_keygen_enable

  - name: user key - Verify user public key exists
    stat:
      path: "{{ ssh_private_key }}"
    register: key_results

  - name: user key - Fail when user keys do not exist
    fail:
      msg: "User SSH keys do not exist. Set 'ssh_keygen_enable: true' to have playbook generate the keys."
    when: not key_results.exists

  - name: user key - Copy the user SSH public key to all of the hosts
    shell: "sshpass -p '{{ ansible_ssh_pass }}' ssh-copy-id -i {{ ssh_public_key }} {{ item }}"
    with_items: "{{ ssh_known_hosts }}"

  # - name: Optionally disable SSH password authentication for tighter security
  #   lineinfile:
  #       path: /etc/ssh/sshd_config # required. The file to modify.,Before 2.3 this option was only usable as I(dest), I(destfile) and I(name).
  #       regexp: 'PasswordAuthentication' # not required. The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found. Only the last line found will be replaced. For C(state=absent), the pattern of the line(s) to remove. Uses Python regular expressions. See U(http://docs.python.org/2/library/re.html).
  #       line: 'PasswordAuthentication no' # not required. Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches.
  #       state: present
  #   when: ssh_disable_password_auth
  #   notify: restart ssh
  #   tags:
  #     - sshdisablepswd

  # - name: Optionally disable SSH root login for tighter security
  #   lineinfile:
  #       path: /etc/ssh/sshd_config # required. The file to modify.,Before 2.3 this option was only usable as I(dest), I(destfile) and I(name).
  #       regexp: 'PermitRootLogin' # not required. The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found. Only the last line found will be replaced. For C(state=absent), the pattern of the line(s) to remove. Uses Python regular expressions. See U(http://docs.python.org/2/library/re.html).
  #       line: 'PermitRootLogin no' # not required. Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches.
  #       state: present
  #   when: ssh_disable_root_login
  #   notify: restart ssh
  #   tags:
  #     - sshdisableroot

  # handlers:

  # - name: restart ssh
  #   service:
  #     name: sshd
  #     state: restarted
