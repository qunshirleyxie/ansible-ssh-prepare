---
- name: Updates local 'known_hosts' file and pushes user public key to each host
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # default public key pushed to targets - override if necessary
    ssh_public_key: '~/.ssh/id_rsa.pub'

    # defaults - most likely not necessary to change these values
    ssh_known_hosts_key_type_param: "-t ecdsa-sha2-nistp256" # leave empty if you want all key types
    ssh_known_hosts_command: "ssh-keyscan -T 10 {{ ssh_known_hosts_key_type_param }}"
    ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"
    ssh_known_hosts: "{{ groups['all'] }}" # all inventory hosts

    # optional - generate a key (if you have not generated one yet)
    ssh_keygen_enable: false
    ssh_private_key: '~/.ssh/id_rsa'

  vars_prompt:
    - name: "ssh_user"
      prompt: "SSH user that will be used to connect to hosts?"
      when: (( ssh_user is undefined ) or ( ssh_user is none ) or ( ssh_user | trim == ''))

    - name: "ssh_password"
      prompt: "SSH password for user connecting to hosts?"
      private: yes
      when: (( ssh_password is undefined ) or ( ssh_password is none ) or ( ssh_password | trim == ''))

  tasks:

  - name: known_hosts - Collect all public host keys for each host
    shell: "{{ ssh_known_hosts_command }} {{ item }},`dig +short {{ item }}`"
    with_items: "{{ ssh_known_hosts }}"
    register: ssh_known_host_results
    ignore_errors: yes

  - name: known_hosts - Cleanup known_hosts by removing entries related to each host
    known_hosts:
      name: "{{ item.item }}"
      state: "absent"
      path: "{{ ssh_known_hosts_file }}"
    with_items: "{{ ssh_known_host_results.results }}"

  - name: known_hosts - Add the public host keys to the known_hosts
    known_hosts:
      name: "{{ item.item }}"
      key: "{{ item.stdout }}"
      state: "present"
      path: "{{ ssh_known_hosts_file }}"
    with_items: "{{ ssh_known_host_results.results }}"

  - name: user key - Optionally generate user SSH key pair
    shell: "ssh-keygen -b 2048 -t rsa -f {{ ssh_private_key }} -q -N ''"
    args:
      creates: "{{ ssh_private_key }}"
    when: ssh_keygen_enable

  - name: user key - Verify user public key exists
    stat:
      path: "{{ ssh_public_key }}"
    register: key_results

  - name: user key - Fail when user keys do not exist
    fail:
      msg: "User SSH keys do not exist. Set 'ssh_keygen_enable: true' to have playbook generate the keys."
    when: not key_results.stat.exists

  - name: user key - Copy the user SSH public key to all of the hosts
    shell: "sshpass -p '{{ ssh_password }}' ssh-copy-id -i {{ ssh_public_key }} {{ ssh_user }}@{{ item }}"
    with_items: "{{ ssh_known_hosts }}"

